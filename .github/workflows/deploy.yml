# GitHub Actions Workflow for Astro Deployment to Vecia VPS (Docker)
# Migrated from PM2 to Docker for better reliability and automatic restarts

name: Deploy Astro to Vecia VPS (Docker)

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: vecia-website:${{ github.sha }},vecia-website:latest
          build-args: |
            NODE_VERSION=20.18.1
            PUBLIC_SITE_URL=https://vecia.fr
            PUBLIC_CAL_EMBED_URL=https://cal.vecia.fr
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image to tar
        run: |
          echo "📦 Saving Docker image..."
          docker save vecia-website:latest | gzip > vecia-website.tar.gz
          ls -lh vecia-website.tar.gz
          echo "✅ Image saved"

      - name: Setup SSH key (decode base64 and validate)
        id: ssh_key
        run: |
          echo "====== Decoding and Validating SSH Key ======"
          mkdir -p ~/.ssh
          echo -n "${{ secrets.VPS_SSH_KEY }}" | base64 -d > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          echo "Key fingerprint:"
          ssh-keygen -l -f ~/.ssh/deploy_key || echo "❌ Key validation failed"

          ssh-keyscan -H -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

          # Output decoded key for appleboy/ssh-action
          echo "decoded_key<<EOF" >> $GITHUB_OUTPUT
          cat ~/.ssh/deploy_key >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "✅ SSH key ready for deployment"

      - name: Transfer Docker image to VPS
        run: |
          echo "🚀 Transferring Docker image to VPS..."
          rsync -avz --progress \
            -e "ssh -i ~/.ssh/deploy_key -p ${{ secrets.VPS_PORT }}" \
            vecia-website.tar.gz \
            ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_TARGET_DIR }}/ \
          | tail -20
          echo "✅ Image transfer complete"

      - name: Transfer Docker Compose files to VPS
        run: |
          echo "📋 Transferring docker-compose.yml..."
          rsync -avz \
            -e "ssh -i ~/.ssh/deploy_key -p ${{ secrets.VPS_PORT }}" \
            docker-compose.yml \
            ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_TARGET_DIR }}/
          echo "✅ Compose file transferred"

      - name: Deploy with Docker Compose on VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ steps.ssh_key.outputs.decoded_key }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd ${{ secrets.VPS_TARGET_DIR }}

            echo "📥 Loading Docker image..."
            gunzip -c vecia-website.tar.gz | docker load

            echo "🔧 Creating/updating .env file..."
            cat > .env << 'EOF'
            PUBLIC_SUPABASE_URL=http://85.25.172.47:8100
            PUBLIC_SUPABASE_ANON_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlLWRlbW8iLCJpYXQiOjE2NDE3NjkyMDAsImV4cCI6MTc5OTUzNTYwMH0.Jp4HPK5Cr7GM2j5eu4SMSYrmyPnL_moGV_olTHvcZbQ
            EOF

            echo "🔄 Deploying with Docker Compose..."
            docker compose down || true
            docker compose up -d

            echo "🧹 Clearing nginx cache..."
            # Clear nginx proxy cache to prevent serving stale HTML with old asset hashes
            sudo rm -rf /var/cache/nginx/* 2>/dev/null || true
            sudo systemctl reload nginx 2>/dev/null || echo "⚠️  Nginx reload skipped (not critical)"

            echo "⏳ Waiting for container to be healthy..."
            timeout 60 bash -c 'until docker inspect vecia-website --format="{{.State.Health.Status}}" 2>/dev/null | grep -q "healthy"; do sleep 2; echo -n "."; done' || {
              echo ""
              echo "❌ Health check timeout!"
              echo "📋 Container status:"
              docker compose ps
              echo ""
              echo "🔴 Container logs:"
              docker compose logs --tail=100
              exit 1
            }

            echo ""
            echo "✅ Container is healthy!"

            # Clean up old images (keep last 2 versions)
            echo "🗑️  Cleaning up old Docker images..."
            docker image prune -f || true

            echo ""
            echo "=========================================="
            echo "✅ Deployment successful!"
            echo "=========================================="
            echo "📁 Deployed to: ${{ secrets.VPS_TARGET_DIR }}"
            echo "🐳 Container: vecia-website"
            echo "🌐 Website: https://vecia.com"
            echo "📅 Deployed at: $(date)"
            echo ""
            echo "📊 Container status:"
            docker compose ps
            echo ""
            echo "💾 Resource usage:"
            docker stats vecia-website --no-stream

      - name: Verify Deployment
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ steps.ssh_key.outputs.decoded_key }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "🔍 Testing health endpoint..."
            HEALTH_RESPONSE=$(curl -f -s http://127.0.0.1:4322/api/health.json)

            if [ $? -eq 0 ]; then
              echo "✅ Health check passed"
              echo "Response: $HEALTH_RESPONSE"
            else
              echo "❌ Health check failed"
              docker compose logs --tail=50
              exit 1
            fi

            echo ""
            echo "🔍 Testing Nginx..."
            if curl -f -s -I https://vecia.com | grep -q "200 OK"; then
              echo "✅ Nginx serving site successfully"
            else
              echo "⚠️  Nginx health check inconclusive"
            fi

            echo ""
            echo "✅ All checks passed - Deployment verified!"
