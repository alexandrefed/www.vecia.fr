# GitHub Actions Workflow for Astro Deployment to Vecia VPS
# Save this file as .github/workflows/deploy.yml in your Astro repository

name: Deploy Astro to Vecia VPS

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Type checking temporarily disabled - 77 errors to fix
      # TODO: Re-enable after fixing TypeScript errors
      # - name: Run type checking
      #   run: npm run astro check

      - name: Build Astro site
        run: npm run build
        env:
          # Public environment variables (available client-side)
          PUBLIC_SITE_URL: https://vecia.fr
          PUBLIC_CAL_EMBED_URL: https://cal.vecia.fr
          PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}

      - name: Install production dependencies
        run: npm ci --omit=dev

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Backup current deployment
            if [ -d "${{ secrets.VPS_TARGET_DIR }}" ] && [ "$(ls -A ${{ secrets.VPS_TARGET_DIR }})" ]; then
              sudo cp -r ${{ secrets.VPS_TARGET_DIR }} ${{ secrets.VPS_TARGET_DIR }}.backup.$(date +%Y%m%d_%H%M%S)
              echo "‚úÖ Backup created"
            fi

            # Create target directory if it doesn't exist
            sudo mkdir -p ${{ secrets.VPS_TARGET_DIR }}
            sudo chown -R ${{ secrets.VPS_USERNAME }}:www-data ${{ secrets.VPS_TARGET_DIR }}
            echo "‚úÖ Directory prepared"

      - name: Transfer dist files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "dist/*"
          target: ${{ secrets.VPS_TARGET_DIR }}
          strip_components: 1
          overwrite: true

      - name: Transfer node_modules to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "node_modules/"
          target: ${{ secrets.VPS_TARGET_DIR }}
          overwrite: true

      - name: Transfer package files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "package.json,package-lock.json"
          target: ${{ secrets.VPS_TARGET_DIR }}
          overwrite: true

      - name: Setup and start Node.js server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          envs: VPS_TARGET_DIR,PUBLIC_SUPABASE_URL,PUBLIC_SUPABASE_ANON_KEY
          script: |
            # Export environment variables (passed via envs parameter)
            export VPS_TARGET_DIR="${{ secrets.VPS_TARGET_DIR }}"
            export PUBLIC_SUPABASE_URL="${{ secrets.PUBLIC_SUPABASE_URL }}"
            export PUBLIC_SUPABASE_ANON_KEY="${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}"

            # Verify directory exists
            if [ ! -d "$VPS_TARGET_DIR" ]; then
              echo "‚ùå Error: VPS_TARGET_DIR does not exist: $VPS_TARGET_DIR"
              exit 1
            fi

            # Set proper permissions
            sudo chown -R www-data:www-data "$VPS_TARGET_DIR"
            sudo find "$VPS_TARGET_DIR" -type d -exec chmod 755 {} \;
            sudo find "$VPS_TARGET_DIR" -type f -exec chmod 644 {} \;

            # Make server entry point executable
            sudo chmod +x "$VPS_TARGET_DIR/server/entry.mjs"

            # Install PM2 if not already installed
            if ! command -v pm2 &> /dev/null; then
              sudo npm install -g pm2
              echo "‚úÖ PM2 installed"
            fi

            # Navigate to deployment directory
            cd "$VPS_TARGET_DIR"

            # Verify server entry point exists
            if [ ! -f "./server/entry.mjs" ]; then
              echo "‚ùå Error: server/entry.mjs not found in $VPS_TARGET_DIR"
              exit 1
            fi

            # Create ecosystem config with actual environment variables
            cat > ecosystem.config.cjs << EOF
module.exports = {
  apps: [{
    name: 'vecia-website',
    script: './server/entry.mjs',
    cwd: '${VPS_TARGET_DIR}',
    instances: 1,
    exec_mode: 'cluster',
    env: {
      HOST: '127.0.0.1',
      PORT: 4321,
      NODE_ENV: 'production',
      PUBLIC_SUPABASE_URL: '${PUBLIC_SUPABASE_URL}',
      PUBLIC_SUPABASE_ANON_KEY: '${PUBLIC_SUPABASE_ANON_KEY}'
    },
    error_file: '/var/log/vecia/pm2-error.log',
    out_file: '/var/log/vecia/pm2-out.log',
    time: true,
    autorestart: true,
    max_restarts: 10,
    min_uptime: '10s'
  }]
};
EOF

            echo "‚úÖ Ecosystem config created"

            # Stop existing process (ignore errors if not running)
            pm2 delete vecia-website 2>/dev/null || true

            # Start with ecosystem config
            pm2 start ecosystem.config.cjs

            # Wait for server to initialize
            echo "‚è≥ Waiting for server to start..."
            sleep 5

            # Verify server is running
            if pm2 status | grep -q "vecia-website.*online"; then
              echo "‚úÖ PM2 reports service is online"
            else
              echo "‚ùå PM2 reports service is not online"
              pm2 logs vecia-website --lines 50
              exit 1
            fi

            # Test server responds locally
            if curl -f -s http://127.0.0.1:4321/api/health.json > /dev/null; then
              echo "‚úÖ Health check passed: Node.js server is responding"
            else
              echo "‚ùå Health check failed: Node.js server is not responding"
              pm2 logs vecia-website --lines 50
              exit 1
            fi

            # Save PM2 process list
            pm2 save

            # Ensure PM2 starts on system boot (idempotent)
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ${{ secrets.VPS_USERNAME }} --hp /home/${{ secrets.VPS_USERNAME }} 2>/dev/null || true

            # Test and reload nginx
            sudo nginx -t && sudo systemctl reload nginx

            # Display deployment status
            echo ""
            echo "=========================================="
            echo "‚úÖ Deployment successful!"
            echo "=========================================="
            echo "üìÅ Files deployed to: $VPS_TARGET_DIR"
            echo "üöÄ Node.js server: http://127.0.0.1:4321"
            echo "üåê Public website: https://vecia.com"
            echo "üìÖ Deployed at: $(date)"
            echo "üìä File count: $(find $VPS_TARGET_DIR -type f | wc -l) files"
            echo ""
            echo "PM2 Status:"
            pm2 status

      - name: Verify Deployment
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Test Node.js server health endpoint
            echo "Testing health endpoint..."
            HEALTH_RESPONSE=$(curl -f -s http://127.0.0.1:4321/api/health.json)

            if [ $? -eq 0 ]; then
              echo "‚úÖ Health check passed"
              echo "Response: $HEALTH_RESPONSE"
            else
              echo "‚ùå Health check failed"
              exit 1
            fi

            # Test Nginx is serving the site
            echo "Testing Nginx..."
            if curl -f -s -I https://vecia.com | grep -q "200 OK"; then
              echo "‚úÖ Nginx serving site successfully"
            else
              echo "‚ö†Ô∏è  Nginx health check inconclusive (may be redirect)"
            fi

            # Final PM2 status
            echo ""
            echo "Final PM2 Status:"
            pm2 status