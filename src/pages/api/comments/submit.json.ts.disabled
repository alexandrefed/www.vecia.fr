/**
 * API Route: POST /api/comments/submit.json
 *
 * Handles comment submission with validation, profanity filtering, and spam prevention.
 *
 * Features:
 * - Profanity filtering (15+ languages)
 * - Random name generation if not provided
 * - Vecia team member detection (Alex/Tanguy)
 * - Honeypot spam prevention
 * - Input validation and sanitization
 */

import type { APIRoute } from 'astro';
import { supabase } from '../../../lib/supabase';
import Filter from 'bad-words';
import { uniqueNamesGenerator, adjectives, colors, animals } from 'unique-names-generator';

// Enable server-side rendering for dynamic route
export const prerender = true;

const filter = new Filter();

// Vecia team member detection
const VECIA_MEMBERS = ['alex', 'tanguy', 'alexandre', 'Ã©quipe vecia', 'vecia team'];

export const POST: APIRoute = async ({ request }) => {
  try {
    const body = await request.json();

    // 1. Honeypot check (spam prevention)
    if (body.website || body.url || body.honey) {
      console.warn('[API] Honeypot triggered - potential spam');
      // Return success to not alert bots
      return new Response(
        JSON.stringify({ success: true }),
        {
          status: 200,
          headers: { 'Content-Type': 'application/json' },
        }
      );
    }

    // 2. Extract and validate required fields
    const { article_slug, author_name, comment_text, parent_comment_id, author_email } = body;

    if (!article_slug || typeof article_slug !== 'string') {
      return errorResponse('Article slug is required', 400);
    }

    if (!comment_text || typeof comment_text !== 'string') {
      return errorResponse('Comment text is required', 400);
    }

    // 3. Validate comment length
    const trimmedComment = comment_text.trim();
    if (trimmedComment.length < 1) {
      return errorResponse('Comment cannot be empty', 400);
    }
    if (trimmedComment.length > 5000) {
      return errorResponse('Comment is too long (max 5000 characters)', 400);
    }

    // 4. Profanity check
    if (filter.isProfane(trimmedComment)) {
      return errorResponse('Comment contains inappropriate language', 400);
    }

    // 5. Handle author name (generate if empty)
    let finalAuthorName = author_name?.trim() || '';

    if (!finalAuthorName) {
      // Generate random name
      finalAuthorName = uniqueNamesGenerator({
        dictionaries: [adjectives, colors, animals],
        separator: ' ',
        style: 'capital',
        length: 2,
      });
    }

    // Validate author name length
    if (finalAuthorName.length > 100) {
      return errorResponse('Author name is too long (max 100 characters)', 400);
    }

    // Check for profanity in author name
    if (filter.isProfane(finalAuthorName)) {
      return errorResponse('Author name contains inappropriate language', 400);
    }

    // 6. Detect if author is Vecia team member
    const isVeciaMember = VECIA_MEMBERS.some(
      (member) => finalAuthorName.toLowerCase().includes(member)
    );

    // 7. Validate parent comment if it's a reply
    if (parent_comment_id) {
      const { data: parentExists, error: parentError } = await supabase
        .from('comments')
        .select('id')
        .eq('id', parent_comment_id)
        .single();

      if (parentError || !parentExists) {
        return errorResponse('Parent comment not found', 400);
      }
    }

    // 8. Insert comment into database
    const { data, error } = await supabase
      .from('comments')
      .insert({
        article_slug,
        author_name: finalAuthorName,
        author_email: author_email || null,
        comment_text: trimmedComment,
        parent_comment_id: parent_comment_id || null,
        is_vecia_member: isVeciaMember,
        approved: true, // Auto-approve for now (can add moderation later)
      })
      .select()
      .single();

    if (error) {
      console.error('[API] Error inserting comment:', error);
      return errorResponse('Failed to save comment', 500);
    }

    // 9. Return success response
    return new Response(
      JSON.stringify({
        success: true,
        comment: data,
        message: 'Comment submitted successfully',
      }),
      {
        status: 201,
        headers: { 'Content-Type': 'application/json' },
      }
    );
  } catch (err) {
    console.error('[API] Unexpected error:', err);
    return errorResponse('An unexpected error occurred', 500);
  }
};

/**
 * Helper function to return error responses
 */
function errorResponse(message: string, status: number) {
  return new Response(
    JSON.stringify({
      success: false,
      error: message,
    }),
    {
      status,
      headers: { 'Content-Type': 'application/json' },
    }
  );
}
