---
import type { Language } from '../i18n/ui';

interface Props {
  lang: Language;
}

const { lang } = Astro.props;

// Translation keys
import { ui } from '../i18n/ui';
const t = ui[lang];

// Color variant mapping (required for Tailwind v4 static analysis)
const colorVariants = {
  tab0: {
    activeButton: 'bg-primary/10 text-primary border-primary/20',
    progress: 'bg-gradient-to-r from-primary/50 to-primary',
    featureDot: 'from-secondary to-accent1',
    valueText: 'text-primary',
    card0: 'from-blue-50 to-blue-100 to-gray-50 border-blue-200/30',
    card1: 'from-cyan-50 to-cyan-100 to-gray-50 border-cyan-200/30',
    card2: 'from-indigo-50 to-indigo-100 to-gray-50 border-indigo-200/30',
    card3: 'from-sky-50 to-sky-100 to-gray-50 border-sky-200/30',
  },
  tab1: {
    activeButton: 'bg-secondary/10 text-secondary border-secondary/20',
    progress: 'bg-gradient-to-r from-secondary/50 to-secondary',
    featureDot: 'from-primary to-accent2',
    chatHeader: 'bg-gradient-to-r from-purple-50 to-blue-50',
    chatAvatar: 'bg-gradient-to-br from-secondary to-primary',
    chatMessage: 'bg-gradient-to-br from-purple-50 to-white border-purple-100',
    typingDot: 'bg-gradient-to-r from-secondary to-primary',
  },
  tab2: {
    activeButton: 'bg-accent1/10 text-accent1 border-accent1/20',
    progress: 'bg-gradient-to-r from-accent1/50 to-accent1',
    featureDot: 'from-accent1 to-primary',
    valueText: 'text-accent1',
    card0: 'from-cyan-50 to-cyan-100 to-gray-50 border-cyan-200/30',
    card1: 'from-blue-50 to-blue-100 to-gray-50 border-blue-200/30',
    card2: 'from-sky-50 to-sky-100 to-gray-50 border-sky-200/30',
    card3: 'from-indigo-50 to-indigo-100 to-gray-50 border-indigo-200/30',
  },
  tab3: {
    activeButton: 'bg-accent2/10 text-accent2 border-accent2/20',
    progress: 'bg-gradient-to-r from-accent2/50 to-accent2',
    featureDot: 'from-accent2 to-secondary',
    chatHeader: 'bg-gradient-to-r from-cyan-50 to-blue-50',
    chatAvatar: 'bg-gradient-to-br from-accent1 to-accent2',
    chatMessage: 'bg-gradient-to-br from-cyan-50 to-white border-cyan-100',
    typingDot: 'bg-gradient-to-r from-accent1 to-accent2',
  },
} as const;

const inactiveButton = 'text-muted hover:text-text hover:bg-gray-50 border-transparent';

// Tab data structure
const tabs = [
  {
    id: 0,
    label: t['suite.tab1.label'],
    description: t['suite.tab1.description'],
    features: [
      t['suite.tab1.feature1'],
      t['suite.tab1.feature2'],
      t['suite.tab1.feature3'],
      t['suite.tab1.feature4'],
    ],
    color: 'primary', // Blue
    dashboard: {
      type: 'metrics',
      cards: [
        { title: t['suite.tab1.card1.title'], value: t['suite.tab1.card1.value'], status: t['suite.tab1.card1.status'] },
        { title: t['suite.tab1.card2.title'], value: t['suite.tab1.card2.value'], status: t['suite.tab1.card2.status'] },
        { title: t['suite.tab1.card3.title'], value: t['suite.tab1.card3.value'], status: t['suite.tab1.card3.status'] },
        { title: t['suite.tab1.card4.title'], value: t['suite.tab1.card4.value'], status: t['suite.tab1.card4.status'] },
      ],
    },
  },
  {
    id: 1,
    label: t['suite.tab2.label'],
    description: t['suite.tab2.description'],
    features: [
      t['suite.tab2.feature1'],
      t['suite.tab2.feature2'],
      t['suite.tab2.feature3'],
      t['suite.tab2.feature4'],
    ],
    color: 'secondary', // Purple
    dashboard: {
      type: 'chat',
      header: t['suite.tab2.chat.header'],
      status: t['suite.tab2.chat.status'],
    },
  },
  {
    id: 2,
    label: t['suite.tab3.label'],
    description: t['suite.tab3.description'],
    features: [
      t['suite.tab3.feature1'],
      t['suite.tab3.feature2'],
      t['suite.tab3.feature3'],
      t['suite.tab3.feature4'],
    ],
    color: 'accent1', // Light Blue
    dashboard: {
      type: 'analytics',
      cards: [
        { title: t['suite.tab3.card1.title'], value: t['suite.tab3.card1.value'], status: t['suite.tab3.card1.status'] },
        { title: t['suite.tab3.card2.title'], value: t['suite.tab3.card2.value'], status: t['suite.tab3.card2.status'] },
        { title: t['suite.tab3.card3.title'], value: t['suite.tab3.card3.value'], status: t['suite.tab3.card3.status'] },
        { title: t['suite.tab3.card4.title'], value: t['suite.tab3.card4.value'], status: t['suite.tab3.card4.status'] },
      ],
    },
  },
  {
    id: 3,
    label: t['suite.tab4.label'],
    description: t['suite.tab4.description'],
    features: [
      t['suite.tab4.feature1'],
      t['suite.tab4.feature2'],
      t['suite.tab4.feature3'],
      t['suite.tab4.feature4'],
    ],
    color: 'accent2', // Purple-blue
    dashboard: {
      type: 'knowledge',
      header: t['suite.tab4.chat.header'],
      status: t['suite.tab4.chat.status'],
    },
  },
];
---

<!-- Alpine.js is REQUIRED here for tab state, auto-rotation, and progress bar -->
<!-- See docs/ALPINEJS-USAGE-GUIDE.md for when to use Alpine vs Tailwind -->
<section class="relative bg-gradient-to-b from-background to-accent3/20 py-20">
  <div class="max-w-7xl mx-auto px-8">

    <!-- Section Title -->
    <div class="mb-12 text-center">
      <h2 class="font-display text-4xl font-bold text-text mb-4">
        <span class="title-icon"></span>{t['suite.title'] || 'AI Suite'}
      </h2>
      <p class="text-lg text-muted max-w-3xl mx-auto">
        {t['suite.subtitle'] || 'Powerful AI tools for your business'}
      </p>
    </div>

    <!-- Tab Buttons -->
    <div
      x-data="{
        activeTab: 0,
        totalTabs: 4,
        interval: null,
        progress: 0,
        progressInterval: null,
        isPaused: false,
        isInView: false,

        startAutoRotate() {
          this.isPaused = false;
          // Clear existing intervals
          if (this.interval) clearInterval(this.interval);
          if (this.progressInterval) clearInterval(this.progressInterval);

          // Calculate remaining time based on current progress
          const remainingProgress = 100 - this.progress;
          const remainingTime = (remainingProgress / 100) * 15000;

          // Progress bar animation (continue from current progress)
          this.progressInterval = setInterval(() => {
            this.progress += 100 / (15000 / 50); // Update every 50ms
            if (this.progress >= 100) {
              this.progress = 100;
            }
          }, 50);

          // Tab rotation after remaining time
          this.interval = setTimeout(() => {
            this.activeTab = (this.activeTab + 1) % this.totalTabs;
            this.progress = 0; // Reset progress when tab changes
            this.startAutoRotate(); // Restart with full cycle
          }, remainingTime);
        },

        stopAutoRotate() {
          this.isPaused = true;
          if (this.interval) clearTimeout(this.interval);
          if (this.progressInterval) clearInterval(this.progressInterval);
        },

        selectTab(index) {
          this.activeTab = index;
          this.progress = 0;
          this.stopAutoRotate();
          this.startAutoRotate();
        },

        nextTab() {
          this.activeTab = (this.activeTab + 1) % this.totalTabs;
          this.progress = 0;
          this.stopAutoRotate();
          this.startAutoRotate();
        },

        prevTab() {
          this.activeTab = (this.activeTab - 1 + this.totalTabs) % this.totalTabs;
          this.progress = 0;
          this.stopAutoRotate();
          this.startAutoRotate();
        }
      }"
      x-init="startAutoRotate()"
      @mouseenter="stopAutoRotate()"
      @mouseleave="startAutoRotate()"
      @touchstart="stopAutoRotate()"
      class="relative"
    >

      <!-- Tab Navigation - Enhanced with Glassmorphism -->
      <div class="bg-white/90 backdrop-blur-lg border border-gray-100/80 rounded-2xl p-1.5 mb-12 shadow-[0_1px_3px_rgba(0,0,0,0.05),0_4px_15px_rgba(0,0,0,0.08)]">
        <nav class="flex flex-wrap gap-1">
          {tabs.map((tab, index) => (
            <button
              @click={`selectTab(${index})`}
              :class={`activeTab === ${index} ? '${colorVariants[`tab${index}` as keyof typeof colorVariants].activeButton} shadow-sm' : '${inactiveButton}'`}
              class="relative flex-1 min-w-[140px] py-3.5 px-4 rounded-xl font-heading font-semibold text-sm tracking-wide transition-all duration-500 border"
            >
              {tab.label}

              <!-- Progress bar on active tab with gradient (only visible on active tab) -->
              <div
                x-show={`activeTab === ${index}`}
                x-transition:enter="transition ease-out duration-200"
                x-transition:enter-start="opacity-0"
                x-transition:enter-end="opacity-100"
                x-bind:style={`activeTab === ${index} ? 'width: ' + progress + '%' : 'width: 0%'`}
                class={`absolute bottom-0 left-0 h-0.5 rounded-full transition-all duration-100 ${colorVariants[`tab${index}` as keyof typeof colorVariants].progress}`}
              ></div>
            </button>
          ))}
        </nav>
      </div>

      <!-- Paused Indicator -->
      <div
        x-show="isPaused"
        x-transition
        class="absolute top-2 right-2 bg-gray-900/80 text-white text-xs px-3 py-1.5 rounded-full backdrop-blur-sm shadow-lg z-10"
      >
        ‚è∏ {lang === 'fr' ? 'En pause' : 'Paused'}
      </div>

      <!-- Tab Content - 40/60 Split Layout with Slide Animations -->
      <!-- x-intersect detects when tabs enter/leave viewport for floating button visibility -->
      <div
        x-intersect:enter="isInView = true"
        x-intersect:leave="isInView = false"
        class="bg-white border border-gray-100 rounded-2xl shadow-lg overflow-hidden">
        <div class="grid grid-cols-1 lg:grid-cols-5 gap-0 min-h-[600px] md:min-h-[500px]">

          {tabs.map((tab, index) => (
            <div
              x-show={`activeTab === ${index}`}
              x-transition:enter="transition ease-out duration-600"
              x-transition:enter-start="opacity-0"
              x-transition:enter-end="opacity-100"
              class="col-span-full grid grid-cols-1 lg:grid-cols-5 gap-0"
              style="display: none;"
            >

              <!-- Left Panel: Description & Features (40% = 2/5 cols) -->
              <div
                class="lg:col-span-2 px-8 py-8 flex flex-col"
                x-show={`activeTab === ${index}`}
                x-transition:enter="transition ease-out duration-600 delay-100"
                x-transition:enter-start="opacity-0 transform -translate-x-4"
                x-transition:enter-end="opacity-100 transform translate-x-0"
              >
                <!-- Title -->
                <h3 class="text-3xl font-display font-medium text-text mb-6 tracking-tight leading-tight">
                  {tab.label}
                </h3>

                <!-- Description -->
                <p class="text-base text-muted font-medium leading-relaxed mb-6">
                  {tab.description}
                </p>

                <!-- Features List -->
                <div class="space-y-4">
                  <h4 class="text-sm font-heading font-bold uppercase tracking-wider text-subtle">
                    Key Features
                  </h4>
                  <ul class="space-y-3">
                    {tab.features.map((feature) => (
                      <li class="flex items-start gap-3 group">
                        <span class={`inline-block w-1.5 h-1.5 rounded-full mt-2 flex-shrink-0 transition-transform group-hover:scale-125 bg-gradient-to-br ${colorVariants[`tab${index}` as keyof typeof colorVariants].featureDot}`}></span>
                        <span class="text-sm text-muted font-medium">{feature}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>

              <!-- Right Panel: Dashboard (60% = 3/5 cols) -->
              <div
                class="lg:col-span-3 bg-gray-50 px-8 py-8"
                x-show={`activeTab === ${index}`}
                x-transition:enter="transition ease-out duration-600 delay-100"
                x-transition:enter-start="opacity-0 transform translate-x-4"
                x-transition:enter-end="opacity-100 transform translate-x-0"
              >

                <!-- Metrics Dashboard (Tab 1 & 3) -->
                {(tab.dashboard.type === 'metrics' || tab.dashboard.type === 'analytics') && 'cards' in tab.dashboard && tab.dashboard.cards && (
                  <div class="grid grid-cols-2 gap-4">
                    {tab.dashboard.cards.map((card, cardIndex) => {
                      const tabKey = `tab${index}` as keyof typeof colorVariants;
                      const cardKey = `card${cardIndex}` as 'card0' | 'card1' | 'card2' | 'card3';
                      const variant = colorVariants[tabKey];
                      return (
                        <div class={`rounded-xl p-5 shadow-[0_1px_2px_rgba(0,0,0,0.05)] border transition-all hover:shadow-md hover:scale-[1.02] bg-gradient-to-br ${variant && cardKey in variant ? (variant as any)[cardKey] : ''}`}>
                          <h4 class="text-sm font-medium text-subtle mb-2">{card.title}</h4>
                          <div class={`text-3xl font-bold ${'valueText' in variant ? (variant as any).valueText : 'text-text'} mb-1`}>{card.value}</div>
                          <p class="text-xs text-muted">{card.status}</p>
                        </div>
                      );
                    })}
                  </div>
                )}

                <!-- Chat Interface (Tab 2 & 4) -->
                {(tab.dashboard.type === 'chat' || tab.dashboard.type === 'knowledge') && (() => {
                  const tabKey = `tab${index}` as keyof typeof colorVariants;
                  const variant = colorVariants[tabKey];
                  return (
                    <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                      {/* Chat Header with Gradient */}
                      <div class={`${'chatHeader' in variant ? variant.chatHeader : ''} p-4 flex items-center justify-between border-b border-gray-100`}>
                        <div class="flex items-center gap-3">
                          <div class={`w-10 h-10 rounded-full flex items-center justify-center ${'chatAvatar' in variant ? variant.chatAvatar : ''}`}>
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                            </svg>
                          </div>
                          <div>
                            <h4 class="font-heading font-bold text-text">{tab.dashboard.header}</h4>
                            <p class="text-sm text-muted">{tab.dashboard.status}</p>
                          </div>
                        </div>
                        <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                      </div>

                      {/* Chat Messages */}
                      <div class="p-6 space-y-4 bg-gray-50/50 min-h-[300px]">
                        {/* Assistant message */}
                        <div class="flex items-start gap-3">
                          <div class={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${'chatAvatar' in variant ? variant.chatAvatar : ''}`}>
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                            </svg>
                          </div>
                          <div class={`rounded-lg p-4 shadow-sm border max-w-[80%] ${'chatMessage' in variant ? variant.chatMessage : ''}`}>
                            <p class="text-sm text-muted">
                              {tab.dashboard.type === 'chat'
                                ? lang === 'fr'
                                  ? 'Je suis pr√™t √† vous aider avec la qualification des leads et les campagnes de messagerie. Comment puis-je vous assister aujourd\'hui ?'
                                  : 'I\'m ready to help with lead qualification and messaging campaigns. How can I assist you today?'
                                : lang === 'fr'
                                  ? 'Je peux acc√©der √† toutes vos bases de donn√©es et outils. Quelle information recherchez-vous ?'
                                  : 'I can access all your databases and tools. What information are you looking for?'}
                            </p>
                          </div>
                        </div>

                        {/* User message */}
                        <div class="flex items-start gap-3 justify-end">
                          <div class="bg-gradient-to-br from-gray-50 to-white rounded-lg p-4 border border-gray-200 max-w-[80%] shadow-sm">
                            <p class="text-sm text-muted">
                              {tab.dashboard.type === 'chat'
                                ? lang === 'fr'
                                  ? 'Montrez-moi les leads les mieux qualifi√©s de cette semaine.'
                                  : 'Show me the top qualified leads from this week.'
                                : lang === 'fr'
                                  ? 'Analysez les tendances de ventes du dernier trimestre.'
                                  : 'Analyze sales trends from last quarter.'}
                            </p>
                          </div>
                          <div class="w-8 h-8 rounded-full bg-gradient-to-br from-gray-200 to-gray-300 flex items-center justify-center flex-shrink-0">
                            <svg class="w-5 h-5 text-muted" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            </svg>
                          </div>
                        </div>

                        {/* Typing indicator with gradient dots */}
                        <div class="flex items-center gap-2">
                          <div class={`w-2 h-2 rounded-full animate-pulse ${'typingDot' in variant ? variant.typingDot : ''}`}></div>
                          <div class={`w-2 h-2 rounded-full animate-pulse ${'typingDot' in variant ? variant.typingDot : ''}`} style="animation-delay: 0.2s"></div>
                          <div class={`w-2 h-2 rounded-full animate-pulse ${'typingDot' in variant ? variant.typingDot : ''}`} style="animation-delay: 0.4s"></div>
                          <span class="text-xs text-subtle ml-2">{lang === 'fr' ? 'En cours...' : 'Typing...'}</span>
                        </div>
                      </div>
                    </div>
                  );
                })()}

              </div>
            </div>

          </div>
        ))}

      </div>

      <!-- Floating Mobile Navigation Buttons -->
      <!-- Alpine.js is REQUIRED here for prev/next navigation and dynamic colors -->
      <!-- Only visible on mobile (< lg breakpoint) AND when tabs are in viewport -->
      <div
        x-show="isInView"
        x-transition
        class="lg:hidden fixed bottom-6 right-6 flex gap-3 z-20">
        <!-- Tab Indicator -->
        <div
          class="flex items-center justify-center bg-white/90 backdrop-blur-sm px-3 py-2 rounded-full shadow-lg border border-gray-200"
          x-transition
        >
          <span class="text-xs font-semibold text-muted" x-text="`${activeTab + 1}/${totalTabs}`"></span>
        </div>

        <!-- Previous Button -->
        <button
          @click="prevTab()"
          class="flex items-center justify-center w-12 h-12 rounded-full shadow-lg backdrop-blur-sm border border-gray-200 transition-all active:scale-95 hover:scale-105"
          :class="{
            'bg-primary/10 text-primary': activeTab === 0,
            'bg-secondary/10 text-secondary': activeTab === 1,
            'bg-accent1/10 text-accent1': activeTab === 2,
            'bg-accent2/10 text-accent2': activeTab === 3
          }"
          aria-label="Previous tab"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>

        <!-- Next Button -->
        <button
          @click="nextTab()"
          class="flex items-center justify-center w-12 h-12 rounded-full shadow-lg backdrop-blur-sm border border-gray-200 transition-all active:scale-95 hover:scale-105"
          :class="{
            'bg-primary/10 text-primary': activeTab === 0,
            'bg-secondary/10 text-secondary': activeTab === 1,
            'bg-accent1/10 text-accent1': activeTab === 2,
            'bg-accent2/10 text-accent2': activeTab === 3
          }"
          aria-label="Next tab"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M9 5l7 7-7 7"></path>
          </svg>
        </button>
      </div>

    </div>
  </div>
</section>
