---
import type { Language } from '../i18n/ui';

interface Props {
  lang: Language;
}

const { lang } = Astro.props;

// Translation keys
import { ui } from '../i18n/ui';
const t = ui[lang];

// Products data structure with Hugeicons
const products = [
  {
    icon: 'hgi-analytics-up',
    title: t['products.analytics.title'],
    features: [
      t['products.analytics.feature1'],
      t['products.analytics.feature2'],
      t['products.analytics.feature3'],
    ],
  },
  {
    icon: 'hgi-target-01',
    title: t['products.sales.title'],
    features: [
      t['products.sales.feature1'],
      t['products.sales.feature2'],
      t['products.sales.feature3'],
    ],
  },
  {
    icon: 'hgi-rocket-01',
    title: t['products.onboarding.title'],
    features: [
      t['products.onboarding.feature1'],
      t['products.onboarding.feature2'],
      t['products.onboarding.feature3'],
    ],
  },
  {
    icon: 'hgi-contracts',
    title: t['products.proposal.title'],
    features: [
      t['products.proposal.feature1'],
      t['products.proposal.feature2'],
      t['products.proposal.feature3'],
    ],
  },
  {
    icon: 'hgi-user-multiple-02',
    title: t['products.crm.title'],
    features: [
      t['products.crm.feature1'],
      t['products.crm.feature2'],
      t['products.crm.feature3'],
    ],
  },
  {
    icon: 'hgi-invoice-01',
    title: t['products.invoice.title'],
    features: [
      t['products.invoice.feature1'],
      t['products.invoice.feature2'],
      t['products.invoice.feature3'],
    ],
  },
  {
    icon: 'hgi-magic-wand-01',
    title: t['products.personalization.title'],
    features: [
      t['products.personalization.feature1'],
      t['products.personalization.feature2'],
      t['products.personalization.feature3'],
    ],
  },
  {
    icon: 'hgi-database-01',
    title: t['products.database.title'],
    features: [
      t['products.database.feature1'],
      t['products.database.feature2'],
      t['products.database.feature3'],
    ],
  },
];
---

<link rel="stylesheet" href="/src/styles/carousel-3d.css">

<!-- Alpine.js is REQUIRED for 3D carousel state management -->
<section class="relative bg-background py-20 overflow-x-hidden">
  <div class="max-w-7xl mx-auto px-8">

    <!-- Section Title -->
    <div class="mb-12 text-center">
      <h2 class="font-display text-4xl font-bold text-gray-800 mb-4">
        <span class="title-icon"></span>{t['products.title']}
      </h2>
      <p class="text-lg text-gray-600 max-w-3xl mx-auto">
        {t['products.subtitle']}
      </p>
    </div>

    <!-- 3D Carousel Container -->
    <div
      x-data="{
        currentIndex: 0,
        totalProducts: 8,
        isAnimating: false,
        touchStartX: 0,
        touchEndX: 0,

        init() {
          // Keyboard navigation
          this.$el.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
              e.preventDefault();
              this.prev();
            } else if (e.key === 'ArrowRight') {
              e.preventDefault();
              this.next();
            }
          });

          // Touch events for mobile swipe
          this.$el.addEventListener('touchstart', (e) => {
            this.touchStartX = e.changedTouches[0].screenX;
          });

          this.$el.addEventListener('touchend', (e) => {
            this.touchEndX = e.changedTouches[0].screenX;
            this.handleSwipe();
          });
        },

        getPosition(index) {
          const diff = index - this.currentIndex;
          const total = this.totalProducts;

          // Normalize difference to handle circular array
          let normalizedDiff = diff;
          if (Math.abs(diff) > total / 2) {
            normalizedDiff = diff > 0 ? diff - total : diff + total;
          }

          if (normalizedDiff === 0) return 'center';
          if (normalizedDiff === -1) return 'left-near';
          if (normalizedDiff === 1) return 'right-near';
          if (normalizedDiff === -2) return 'left-far';
          if (normalizedDiff === 2) return 'right-far';
          return 'hidden';
        },

        prev() {
          if (this.isAnimating) return;
          this.isAnimating = true;
          this.currentIndex = (this.currentIndex - 1 + this.totalProducts) % this.totalProducts;
          setTimeout(() => { this.isAnimating = false; }, 500);
        },

        next() {
          if (this.isAnimating) return;
          this.isAnimating = true;
          this.currentIndex = (this.currentIndex + 1) % this.totalProducts;
          setTimeout(() => { this.isAnimating = false; }, 500);
        },

        goTo(index) {
          if (this.isAnimating || index === this.currentIndex) return;
          this.isAnimating = true;
          this.currentIndex = index;
          setTimeout(() => { this.isAnimating = false; }, 500);
        },

        handleSwipe() {
          const swipeThreshold = 50;
          const diff = this.touchStartX - this.touchEndX;

          if (Math.abs(diff) > swipeThreshold) {
            if (diff > 0) {
              this.next();
            } else {
              this.prev();
            }
          }
        }
      }"
      x-init="init()"
      class="carousel-3d-container"
      tabindex="0"
      role="region"
      aria-label="Product carousel"
      aria-live="polite"
    >

      <!-- 3D Card Track -->
      <div class="carousel-3d-track" role="list">
        {products.map((product, index) => (
          <article
            class="product-card-3d"
            x-data={`{ cardIndex: ${index} }`}
            :data-position="getPosition(cardIndex)"
            @click="goTo(cardIndex)"
            role="listitem"
            tabindex={index === 0 ? '0' : '-1'}
            :tabindex="getPosition(cardIndex) === 'center' ? '0' : '-1'"
            aria-label={`Product ${index + 1} of ${products.length}: ${product.title}`}
            :aria-current="getPosition(cardIndex) === 'center' ? 'true' : 'false'"
          >

            <!-- Icon Container -->
            <div class="product-card-icon" aria-hidden="true">
              <i class={`hgi-stroke ${product.icon}`}></i>
            </div>

            <!-- Product Title -->
            <h3 class="product-card-title">
              {product.title}
            </h3>

            <!-- Features List -->
            <ul class="product-card-features">
              {product.features.map((feature) => (
                <li>{feature}</li>
              ))}
            </ul>

          </article>
        ))}
      </div>

      <!-- Navigation Arrows -->
      <nav class="carousel-nav-3d left" aria-label="Previous product">
        <button
          @click="prev()"
          class="carousel-nav-btn"
          aria-label="View previous product"
          type="button"
        >
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>
      </nav>

      <nav class="carousel-nav-3d right" aria-label="Next product">
        <button
          @click="next()"
          class="carousel-nav-btn"
          aria-label="View next product"
          type="button"
        >
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </button>
      </nav>

      <!-- Dot Indicators -->
      <div class="carousel-dots-3d" role="tablist" aria-label="Product selection">
        {products.map((_, index) => (
          <button
            x-data={`{ dotIndex: ${index} }`}
            @click="goTo(dotIndex)"
            :class="{ 'active': currentIndex === dotIndex }"
            class="carousel-dot"
            role="tab"
            :aria-selected="currentIndex === dotIndex ? 'true' : 'false'"
            aria-label={`Go to product ${index + 1}`}
            type="button"
          ></button>
        ))}
      </div>

    </div>

  </div>
</section>

<style>
  /* Additional component-specific styles if needed */
  :root {
    --transition-smooth: 500ms;
  }
</style>
